# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MyServiceStub(object):
    """========================
    Service de Usuario
    ========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/MyService/Login',
                request_serializer=service__pb2.LoginRequest.SerializeToString,
                response_deserializer=service__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.AltaUser = channel.unary_unary(
                '/MyService/AltaUser',
                request_serializer=service__pb2.AltaUsuarioRequest.SerializeToString,
                response_deserializer=service__pb2.AltaUsuarioResponse.FromString,
                _registered_method=True)
        self.GetAllUsers = channel.unary_unary(
                '/MyService/GetAllUsers',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.UserListResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/MyService/UpdateUser',
                request_serializer=service__pb2.UpdateUsuarioRequest.SerializeToString,
                response_deserializer=service__pb2.AltaUsuarioResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/MyService/DeleteUser',
                request_serializer=service__pb2.DeleteUsuarioRequest.SerializeToString,
                response_deserializer=service__pb2.DeleteUsuarioResponse.FromString,
                _registered_method=True)
        self.SendEmail = channel.unary_unary(
                '/MyService/SendEmail',
                request_serializer=service__pb2.SendEmailRequest.SerializeToString,
                response_deserializer=service__pb2.SendEmailResponse.FromString,
                _registered_method=True)


class MyServiceServicer(object):
    """========================
    Service de Usuario
    ========================
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AltaUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=service__pb2.LoginRequest.FromString,
                    response_serializer=service__pb2.LoginResponse.SerializeToString,
            ),
            'AltaUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AltaUser,
                    request_deserializer=service__pb2.AltaUsuarioRequest.FromString,
                    response_serializer=service__pb2.AltaUsuarioResponse.SerializeToString,
            ),
            'GetAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUsers,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.UserListResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=service__pb2.UpdateUsuarioRequest.FromString,
                    response_serializer=service__pb2.AltaUsuarioResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=service__pb2.DeleteUsuarioRequest.FromString,
                    response_serializer=service__pb2.DeleteUsuarioResponse.SerializeToString,
            ),
            'SendEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEmail,
                    request_deserializer=service__pb2.SendEmailRequest.FromString,
                    response_serializer=service__pb2.SendEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MyService(object):
    """========================
    Service de Usuario
    ========================
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/Login',
            service__pb2.LoginRequest.SerializeToString,
            service__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AltaUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/AltaUser',
            service__pb2.AltaUsuarioRequest.SerializeToString,
            service__pb2.AltaUsuarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/GetAllUsers',
            service__pb2.Empty.SerializeToString,
            service__pb2.UserListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/UpdateUser',
            service__pb2.UpdateUsuarioRequest.SerializeToString,
            service__pb2.AltaUsuarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/DeleteUser',
            service__pb2.DeleteUsuarioRequest.SerializeToString,
            service__pb2.DeleteUsuarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MyService/SendEmail',
            service__pb2.SendEmailRequest.SerializeToString,
            service__pb2.SendEmailResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EventServiceStub(object):
    """========================
    Service de eventos
    ========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllEvents = channel.unary_unary(
                '/EventService/GetAllEvents',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.EventListResponse.FromString,
                _registered_method=True)


class EventServiceServicer(object):
    """========================
    Service de eventos
    ========================
    """

    def GetAllEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllEvents,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.EventListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('EventService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """========================
    Service de eventos
    ========================
    """

    @staticmethod
    def GetAllEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EventService/GetAllEvents',
            service__pb2.Empty.SerializeToString,
            service__pb2.EventListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DonationServiceStub(object):
    """========================
    Service de donacion
    ========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllDonations = channel.unary_unary(
                '/DonationService/GetAllDonations',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.DonationListResponse.FromString,
                _registered_method=True)


class DonationServiceServicer(object):
    """========================
    Service de donacion
    ========================
    """

    def GetAllDonations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DonationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllDonations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDonations,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.DonationListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DonationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DonationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DonationService(object):
    """========================
    Service de donacion
    ========================
    """

    @staticmethod
    def GetAllDonations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DonationService/GetAllDonations',
            service__pb2.Empty.SerializeToString,
            service__pb2.DonationListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
